<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on CSE 2421 TL;DR</title>
    <link>/cse2421tldr/posts/</link>
    <description>Recent content in Posts on CSE 2421 TL;DR</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 09 Feb 2021 02:30:11 -0500</lastBuildDate><atom:link href="/cse2421tldr/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Lecture 14</title>
      <link>/cse2421tldr/posts/lecture-14/</link>
      <pubDate>Tue, 09 Feb 2021 02:30:11 -0500</pubDate>
      
      <guid>/cse2421tldr/posts/lecture-14/</guid>
      <description>Lecture 14 Video : Strings In C
Slides : Linked Lists
Strings ANSI C does not have a string data type. Strings are stored as contiguous bytes in memory, as an array. Include string.h and or strings.h to access library string functions. Character will be encoded to memory as ASCII.
To manipulate strings, use char arrays. Character arrays must end with the NULL character \0. The null character is a critical differentiation between strings and other kinds of arrays.</description>
    </item>
    
    <item>
      <title>Lecture 13</title>
      <link>/cse2421tldr/posts/lecture-13/</link>
      <pubDate>Thu, 04 Feb 2021 02:30:11 -0500</pubDate>
      
      <guid>/cse2421tldr/posts/lecture-13/</guid>
      <description>Lecture 13 Video : Linked Lists In C Part A Video : Linked Lists In C Part B
Slides : Linked Lists
Linked List Nodes List of objects that have pointers to the next node in the list. More efficient than arrays when inserting and deleting items from the list.
struct Data { ... } typedef struct Node { struct Data data; struct Node *next; }Node;  Note that despite the typedef Node declaration as Node, the identifier is not available until after the struct has been parsed by the compiler.</description>
    </item>
    
    <item>
      <title>Lecture 11</title>
      <link>/cse2421tldr/posts/lecture-11/</link>
      <pubDate>Tue, 02 Feb 2021 02:30:11 -0500</pubDate>
      
      <guid>/cse2421tldr/posts/lecture-11/</guid>
      <description>Lecture 11 Video : Software Design Principles in C
Slides : Software Design Principles in C
Communication Give users precise prompts such as type and formatting such as spaces, tabs, and new lines. Describe outputs with good labels.
Structure  # include directives # define directives Function prototypes main  Variable declarations Calls to other functions No work should occur inside main.   Function definitions  Reusable components Functions should provide a single piece of functionality that is reasonably likely to be useful in other programs.</description>
    </item>
    
    <item>
      <title>Lecture 12</title>
      <link>/cse2421tldr/posts/lecture-12/</link>
      <pubDate>Tue, 02 Feb 2021 02:30:11 -0500</pubDate>
      
      <guid>/cse2421tldr/posts/lecture-12/</guid>
      <description>Lecture 12 Video : Structures in C Part A Video : Structures in C Part A
Slides : Structures in C Part A
Structures Collection of members (values) that can be of various types. Since members may be of different sizes, indexing cannot be used to access members of a structure. Members can be any type including Arrays, Pointers, Structures, User-defined data, and primitive types.
 A structure is NOT an array of its members.</description>
    </item>
    
    <item>
      <title>Lecture 10</title>
      <link>/cse2421tldr/posts/lecture-10/</link>
      <pubDate>Tue, 28 Jan 2020 02:30:11 -0500</pubDate>
      
      <guid>/cse2421tldr/posts/lecture-10/</guid>
      <description>Lecture 10 Video : C Pointers 2 Part A Video : C Pointers 2 Part B
Slides : C Pointers Part 2
Pointers part 2 Relationship between arrays and pointers, void pointers, dynamic memory, pointer arithmetic, and passing pointers.
Arrays Arrays can only be accessed by pointers. Static arrays are allocated by the compiler, dynamic arrays must be allocated with malloc at runtime and will be referenced by a void pointer.</description>
    </item>
    
    <item>
      <title>Lecture 9</title>
      <link>/cse2421tldr/posts/lecture-9/</link>
      <pubDate>Sun, 26 Jan 2020 02:30:11 -0500</pubDate>
      
      <guid>/cse2421tldr/posts/lecture-9/</guid>
      <description>Lecture 9 Video : C Pointers 1 Part A Video : C Pointers 1 Part B
Slides : C Pointers Part 1
Pointers All variables have an address. This identifies the location in memory of the value of the variable. On 64bit systems, the address is an 8-byte integer. Memory addresses can range from 0 up to the size of memory in bytes - 1.
A variable name is known as the identifier and the value is stored at the identifiers address.</description>
    </item>
    
    <item>
      <title>Lecture 6</title>
      <link>/cse2421tldr/posts/lecture-6/</link>
      <pubDate>Tue, 21 Jan 2020 02:30:11 -0500</pubDate>
      
      <guid>/cse2421tldr/posts/lecture-6/</guid>
      <description>Lecture 6 Video : C Part 3 IO
Slides : C Part 3 IO
Assignment Read Pointers on C, 15.8, 15.8.1, 15.10 through 15.10.4 inclusive.
 I/O No standard Input/Output defined in language, use &amp;lt;stdio.h&amp;gt;. Linux/Unix use ASCII, course will also use ASCII.  Character I/O Return integer ASCII characters. Must be cast to char or printed with &amp;quot;%c&amp;quot;. Can return EOF.
int getchar(void) int putchar(int) int scanf(char const *format, $params.</description>
    </item>
    
    <item>
      <title>Lecture 7</title>
      <link>/cse2421tldr/posts/lecture-7/</link>
      <pubDate>Tue, 21 Jan 2020 02:30:11 -0500</pubDate>
      
      <guid>/cse2421tldr/posts/lecture-7/</guid>
      <description>Lecture 7 Video : C Part 4 Redirection
Slides : C Part 4 Redirection
Redirection 3 distinct data streams: stdin(0) stdout(1) stderr(2). Unix/Linux default to keyboard, screen, and screen respectively.
This can be changed with the command line.
 &amp;lt; input &amp;gt; output 2&amp;gt; error  prog1 &amp;lt; infile &amp;gt; outfile 2&amp;gt; outErrorFile  Input files must end with EOL. This is a blank line at the end of the file.</description>
    </item>
    
    <item>
      <title>Lecture 8</title>
      <link>/cse2421tldr/posts/lecture-8/</link>
      <pubDate>Tue, 21 Jan 2020 02:30:11 -0500</pubDate>
      
      <guid>/cse2421tldr/posts/lecture-8/</guid>
      <description>Lecture 8 Video : C Part 5 Control Structure
Slides : C Part 5 Control Structure
Loop Constructs Best practice is to always use {} for clarity. 1 line loop bodies without {} will be deducted points.
for (expression1, expression2; expression3) { ... }  Variables cannot be initializes in expression1. i.e. int i = 0. Only i = 0 is allowed in expression1.
 while (expression) { ... } do while will always execute at least once.</description>
    </item>
    
    <item>
      <title>Text: Pointers On C (4_C_Part_1)</title>
      <link>/cse2421tldr/posts/text-pointers-on-c-ch5/</link>
      <pubDate>Sun, 19 Jan 2020 03:30:11 -0500</pubDate>
      
      <guid>/cse2421tldr/posts/text-pointers-on-c-ch5/</guid>
      <description>Assignment Read chapter 5 through 5.1.3; 5.3 to end of chapter
Operators and Expressions C has numerous operators, many unavailable in other languages.
Arithmetic + - * / %
Work one floating-pont and integers types, except %.
/ truncates when both operands are integers, floating-point otherwise..
% divides the left integer operand by the right integer operand and returns the remainder.
Shifting Slide the bits in a value left or right.</description>
    </item>
    
    <item>
      <title>Lecture 4</title>
      <link>/cse2421tldr/posts/lecture-4/</link>
      <pubDate>Sun, 19 Jan 2020 02:30:11 -0500</pubDate>
      
      <guid>/cse2421tldr/posts/lecture-4/</guid>
      <description>Lecture 4 Video : C Part 1
Slides : C Part 1
Compilation The way c programs are built.
 Source file  $ gcc -o hello hello.c   Preprocessor  Collects .c and .h into .i file.   Compiler  Converts .i file into assembly language file .s.   Assembler  Converts .s into object file .o. Encoded instruction and data bit strings. Contains unresolved symbols.   Link Editor  Resolves unresolved symbols.</description>
    </item>
    
    <item>
      <title>Lecture 5</title>
      <link>/cse2421tldr/posts/lecture-5/</link>
      <pubDate>Sun, 19 Jan 2020 02:30:11 -0500</pubDate>
      
      <guid>/cse2421tldr/posts/lecture-5/</guid>
      <description>Lecture 5 Video : C Part 2 Op Precedence
Slides : C Part 2 Op Precedence
Lvalue Must be modifiable. Represents a register/memory location.
Rvalue Constants, expressions, return value from a function, etc.
Operator Operators operate on operands. Operands are expressions that have a type and have return a value that is a type.
Precedence and Associativity (P&amp;amp;A) Between two operators, which takes precedence. Binary relation, defined relative to two adjacent operators.</description>
    </item>
    
    <item>
      <title>Text: Pointers On C (3_Intro_To_C)</title>
      <link>/cse2421tldr/posts/text-pointers-on-c-ch14-copy/</link>
      <pubDate>Wed, 15 Jan 2020 02:30:11 -0500</pubDate>
      
      <guid>/cse2421tldr/posts/text-pointers-on-c-ch14-copy/</guid>
      <description>The Preprocessor First step in compiling. Removes comments, inserts #include contents, substitutes #define symbols, and processes conditional compilation directives.
Predefined symbols    Symbol Sample Value Meaning     __FILE__ &amp;ldquo;name.c&amp;rdquo; Name of the source file being compiled.   __LINE__ 25 Line number of the current line in the file.   __DATE__ &amp;ldquo;Jan 1 2020&amp;rdquo; Date the file was compiled.   __TIME__ &amp;ldquo;18:04:30&amp;rdquo; Time that the file was compiled.</description>
    </item>
    
    <item>
      <title>Lecture 3</title>
      <link>/cse2421tldr/posts/lecture-3/</link>
      <pubDate>Tue, 14 Jan 2020 02:30:11 -0500</pubDate>
      
      <guid>/cse2421tldr/posts/lecture-3/</guid>
      <description>Intro To C Video : Intro To C
Slides : Intro To C
C is procedural, compiles to machine code that runs directly on the hardware. Direct manipulation of memory, no garbage collection. Memory leaks occur when memory is mismanaged.
RAM is finite. 64 bit address spaces, use 42 bits, 2^42 bytes (~4TB) of max RAM.
C does NOT  Classes/Objects (n the OOP sense) Encapsulation Inheritance Not object oriented  Features ARE approximated by writing code in a disciplined way.</description>
    </item>
    
    <item>
      <title>Lecture 1 and 2</title>
      <link>/cse2421tldr/posts/lecture-1/</link>
      <pubDate>Sun, 12 Jan 2020 02:30:11 -0500</pubDate>
      
      <guid>/cse2421tldr/posts/lecture-1/</guid>
      <description>Lecture 1 Intro  Your browser does not support video.  Slides : Intro To Course
Email : Mike green.15@osu.edu
Text : Computer Systems: A Programmer’s Perspective, 3rd Edition, by Randall E. Bryant and David R. O’Hallaron, (Required)
Text : Pointers on C, by Kenneth Reek 1997
Always include the following certification text when submitting assignments. Either in a readme or in a code file as a comment.
 BY SUBMITTING THIS FILE TO CARMEN, I CERTIFY THAT I HAVE STRICTLY ADHERED TO THE TENURES OF THE OHIO STATE UNIVERSITY’S ACADEMIC INTEGRITY POLICY WITH RESPECT TO THIS ASSIGNMENT.</description>
    </item>
    
  </channel>
</rss>
